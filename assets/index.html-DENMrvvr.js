import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as s}from"./app-DX6MOtLJ.js";const n="/study/assets/1-syJ5Afov.png",r="/study/assets/2-DAH5x3Cm.png",o="/study/assets/3-E-joZOpr.png",g="/study/assets/4-CKRDN1rV.png",l="/study/assets/5-RCZuicpI.png",p="/study/assets/6-Bze0J6ho.png",c="/study/assets/7-BvAgR9O8.png",d="/study/assets/8-Bu1l4UO5.png",m="/study/assets/9-BM8lrRpn.png",h="/study/assets/10-hjM1uJTe.png",u="/study/assets/11-W3uDdK_Z.png",f={};function b(_,i){return s(),e("div",null,[...i[0]||(i[0]=[a('<h1 id="git学习" tabindex="-1"><a class="header-anchor" href="#git学习"><span>git学习</span></a></h1><p><a href="https://www.bilibili.com/video/BV1FE411P7B3/?spm_id_from=333.337.search-card.all.click&amp;vd_source=a6eb521e36b374fb3879195186734cb5" target="_blank" rel="noopener noreferrer">【狂神说Java】Git最新教程通俗易懂_哔哩哔哩_bilibili</a></p><p>学习参考上述链接</p><h2 id="版本控制" tabindex="-1"><a class="header-anchor" href="#版本控制"><span>版本控制</span></a></h2><p>版本控制是一种在开发过程中用于管理我们对文件、目录或工程内容的修改历史</p><p>，方便查看更改历史记录，备份以便于恢复以前版本的软件工程技术</p><ul><li>实现跨区域多人协同开发</li><li>追踪和记录或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><figure><img src="'+n+'" alt="image-20251022141926282" tabindex="0" loading="lazy"><figcaption>image-20251022141926282</figcaption></figure><p>多人开发就必须要适用版本控制，否则代价会比较大！</p><p>主流的版本控制器有如下这些</p><ul><li><strong>Git</strong></li><li><strong>SVN</strong>(Subversion)</li><li><strong>CVS</strong>(Concurrent Versions System)</li><li><strong>VSS</strong>(Micorosoft Visual SourceSafe)</li><li><strong>TFS</strong>(Team Foundation Server)</li><li>Visual Studio Online</li></ul><h3 id="集中版本控制" tabindex="-1"><a class="header-anchor" href="#集中版本控制"><span>集中版本控制</span></a></h3><figure><img src="'+r+'" alt="image-20251022143650445" tabindex="0" loading="lazy"><figcaption>image-20251022143650445</figcaption></figure><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或者上传自己的修改</p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不联网的话，用户就看不到历史版本，也无法切换版本验证问题，或者在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样会丢失所有数据，当然可以定期备份，代表产品：SVN、CVS、VSS</p><h3 id="分布式版本控制" tabindex="-1"><a class="header-anchor" href="#分布式版本控制"><span>分布式版本控制</span></a></h3><figure><img src="'+o+'" alt="image-20251022143817683" tabindex="0" loading="lazy"><figcaption>image-20251022143817683</figcaption></figure><p>**风险:**每个人都拥有全部的代码!安全隐患</p><p>所有的版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需要在连网时push到相应的服务器或者其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地储存空间的占用。</p><p>不会因为服务器损坏挥着网络问题，造成不能工作的情况!</p><h3 id="git和svn最主要的区别" tabindex="-1"><a class="header-anchor" href="#git和svn最主要的区别"><span>git和SVN最主要的区别</span></a></h3><p>SVN是集中版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器的到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器，集中式版本控制系统是必须联网才能工作，对网络带宽的要求较高。</p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网，因为版本都在自己电脑上，协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们俩之间只需要把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件!</p><p>Git是目前世界上最先进的分布式版本控制系统</p><h2 id="git历史" tabindex="-1"><a class="header-anchor" href="#git历史"><span>git历史</span></a></h2><p>这个就截了一张图了解一下</p><figure><img src="'+g+`" alt="image-20251022145822842" tabindex="0" loading="lazy"><figcaption>image-20251022145822842</figcaption></figure><h2 id="git下载" tabindex="-1"><a class="header-anchor" href="#git下载"><span>git下载</span></a></h2><p>下载慢的话，直接找镜像源安装</p><p><strong>Git Bash</strong>:Unix与Linux风格的命令行，使用最多，推荐最多</p><p><strong>Git CMD</strong>:Windows风格的命令行</p><p><strong>Git GUI</strong>:图形界面的Git,不建议初学者使用，尽量先熟悉常用命令</p><h2 id="git环境配置" tabindex="-1"><a class="header-anchor" href="#git环境配置"><span>git环境配置</span></a></h2><p>查看配置 <strong>git config -l</strong></p><p>查看系统配置 <strong>git config --system --list</strong></p><p>查看全局配置(当前用户) <strong>git config --global --list</strong></p><p>安装git后首先要做的就是设置你的用户名和e-mail地址.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>git config --global user.name 名称</span></span>
<span class="line"><span>git config --global user.email 邮箱</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Git相关的配置文件：</strong></p><p>(1)Git\\mingw64\\etc\\gitconfig:Git安装目录下的gitconfig --system 系统级</p><figure><img src="`+l+'" alt="image-20251022222219693" tabindex="0" loading="lazy"><figcaption>image-20251022222219693</figcaption></figure><p>(2)C:\\Users\\Administrator.gitconfig 只适用于当前登录用户的配置 --global 全局</p><p>这里可以直接编辑配置文件，通过命令设置后会响应到这里.</p><figure><img src="'+p+'" alt="image-20251022222726299" tabindex="0" loading="lazy"><figcaption>image-20251022222726299</figcaption></figure><h2 id="git基本理论-核心" tabindex="-1"><a class="header-anchor" href="#git基本理论-核心"><span>git基本理论（核心）</span></a></h2><p>Git本地有三个工作区域：工作目录(Working Directory)、暂存区(Stage/Index)、资源库(Repository或者Git Directory).如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><figure><img src="'+c+'" alt="image-20251022223624834" tabindex="0" loading="lazy"><figcaption>image-20251022223624834</figcaption></figure><ul><li>Workspace:工作区，就是你平时存放项目代码的地方</li><li>Index/Stage:暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository:仓库区（或本地仓库），就是安全存放数据的地方，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote:远程仓库，托管代码的服务器，可以简单地认为是你项目组中的一台电脑用于远程数据交换</li></ul><figure><img src="'+d+'" alt="image-20251022224824853" tabindex="0" loading="lazy"><figcaption>image-20251022224824853</figcaption></figure><ul><li>Directory:使用Git管理的一个目录，也就是一个仓库，包括我们的工作空间和Git的管理空间</li><li>WorkSpace:需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间</li><li>.git:存放Git管理信息的目录，初始化仓库的时候自动创建。</li><li>Index/Stage:暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo:本地仓库，一个存放在本地的版本库；HEAD会指向当前的开发分支(branch).</li><li>Stash:隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态.</li></ul><p>git的工作流程一般是这样的:</p><ol><li>在工作目录中添加、修改文件</li><li>将需要进行版本管理的文件放在暂存区；</li><li>将暂存区的文件提交到git仓库。</li></ol><p>因此，git管理的文件有三种状态：已修改(modified),已暂存(staged),已提交(committed)</p><figure><img src="'+m+'" alt="image-20251022230708199" tabindex="0" loading="lazy"><figcaption>image-20251022230708199</figcaption></figure><h2 id="git项目搭建" tabindex="-1"><a class="header-anchor" href="#git项目搭建"><span>Git项目搭建</span></a></h2><p>工作目录(WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文</p><figure><img src="'+h+`" alt="image-20251022231008924" tabindex="0" loading="lazy"><figcaption>image-20251022231008924</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>git init 创建全新仓库</span></span>
<span class="line"><span>git clone [url] 克隆远程仓库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="image-20251022231509267" tabindex="0" loading="lazy"><figcaption>image-20251022231509267</figcaption></figure>',60)])])}const v=t(f,[["render",b]]),k=JSON.parse('{"path":"/blogs/2025_10_22_14/","title":"git学习","lang":"zh-CN","frontmatter":{"cover":null,"icon":"pen-to-square","date":"2025-10-22T00:00:00.000Z","category":["git"],"tag":["git学习"],"star":true,"sticky":true,"description":"git学习 【狂神说Java】Git最新教程通俗易懂_哔哩哔哩_bilibili 学习参考上述链接 版本控制 版本控制是一种在开发过程中用于管理我们对文件、目录或工程内容的修改历史 ，方便查看更改历史记录，备份以便于恢复以前版本的软件工程技术 实现跨区域多人协同开发 追踪和记录或者多个文件的历史记录 组织和保护你的源代码和文档 统计工作量 并行开发、提...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git学习\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-22T15:21:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"离卿\\"}]}"],["meta",{"property":"og:url","content":"https://liqing6666666.github.io/study/study/blogs/2025_10_22_14/"}],["meta",{"property":"og:site_name","content":"博客展示"}],["meta",{"property":"og:title","content":"git学习"}],["meta",{"property":"og:description","content":"git学习 【狂神说Java】Git最新教程通俗易懂_哔哩哔哩_bilibili 学习参考上述链接 版本控制 版本控制是一种在开发过程中用于管理我们对文件、目录或工程内容的修改历史 ，方便查看更改历史记录，备份以便于恢复以前版本的软件工程技术 实现跨区域多人协同开发 追踪和记录或者多个文件的历史记录 组织和保护你的源代码和文档 统计工作量 并行开发、提..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-22T15:21:32.000Z"}],["meta",{"property":"article:tag","content":"git学习"}],["meta",{"property":"article:published_time","content":"2025-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-22T15:21:32.000Z"}]]},"git":{"createdTime":1761146492000,"updatedTime":1761146492000,"contributors":[{"name":"liqing6666666","username":"liqing6666666","email":"202321111078@mail.scuec.edu.cn","commits":1,"url":"https://github.com/liqing6666666"}]},"readingTime":{"minutes":5.74,"words":1723},"filePathRelative":"blogs/2025_10_22_14/index.md","excerpt":"\\n<p><a href=\\"https://www.bilibili.com/video/BV1FE411P7B3/?spm_id_from=333.337.search-card.all.click&amp;vd_source=a6eb521e36b374fb3879195186734cb5\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【狂神说Java】Git最新教程通俗易懂_哔哩哔哩_bilibili</a></p>\\n<p>学习参考上述链接</p>\\n<h2>版本控制</h2>\\n<p>版本控制是一种在开发过程中用于管理我们对文件、目录或工程内容的修改历史</p>","autoDesc":true}');export{v as comp,k as data};
